.skip-to-main-content-link {
    position: absolute;
    left: -9999px;
    z-index: 999;
    padding: 1em;
    background-color: black;
    color: white;
    opacity: 0;
}

.skip-to-main-content-link:focus {
    left: 1rem;
    transform: translate(0%, 4rem);
    opacity: 1;
}

.back-to-top {
    --offset: 25rem;
    position: sticky;
    background: #000;
    color: #fff;
    border-radius: 5px;
    bottom: 1rem;
    left: calc(100vw - 8rem);
    margin-top: calc(100vh + var(--offset));
    padding: 10px;
    font-family: sans-serif;
    text-decoration: none;
    transition: all .25s ease-in-out;
    white-space: nowrap;
} 

.truncate {
    display: -webkit-box;
    -webkit-line-clamp: var(--line-clamp, 6);
    -webkit-box-orient: vertical;
    word-break: var(--word-break, 'none');
    overflow: hidden;
    hyphens: auto;
    text-align: var(--align, left);

    --is-single-line: 1 - Clamp(0, Calc(var(--line-clamp) - 1), var(--line-clamp));
    --delay: Calc(-1s * (var(--is-single-line, 1) - 1));
    animation: states 1s var(--delay) paused;

    @keyframes states {
        0% {
            word-break: break-all;
        }
    }
}

@media screen and (min-width: 1200px) {
}


.truncate {
    font-size: var(--font-size, 1em);
    width: var(--width, 80%);
    text-shadow: 1px 3px 0 rgba(black, .3);
    position: relative;
    background: inherit;
}

/* // fade text's last word, if clamped ()  */
.truncate::after {
    content: '';
    width: 0;
    height: 2ch;
    position: absolute;
    bottom: 0;
    right: 0;
    pointer-events: none;
    /* //background: linear-gradient(90deg, transparent, var(--bg)); // it's easier to work with inheritance  */
    background: inherit;
    mask-image: linear-gradient(to left, black, transparent);
    transition: .2s;
}

.truncate.clamped::after {
    width: 3em;
}